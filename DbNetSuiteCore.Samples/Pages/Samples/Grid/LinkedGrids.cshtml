@page
@using DbNetSuiteCore.Enums
@using DbNetSuiteCore.Constants
@using DbNetSuiteCore.Models

@using Microsoft.AspNetCore.Html
@model DbNetSuiteCoreSamples.ViewModels.SampleModel
@section Title
{
    <p data-summary>On of the more powerful features of the grid control is that they can be linked together to create parent child relationships.</p> <p>To link a child grid simply add it to the parent control using the <b>AddLinkedGrid</b> method. The grids are linked by automatically associating the column in the child grid specified as a <b>ForeignKey</b> with the column in the parent grid identified as a <b>PrimaryKey</b>. The sample also demonstrates use of the client-side event <b>RowSelected</b> to set the tab label using the client-side <b>columnValue</b>. method</p> <p>The sample use Bootstrap tabs to present the linked grids and uses the client-side event <b>RowSelected</b> to update the tab lable inline with the records selected</p>
}

@section Styles
{
    <style>
        .dbnetsuite {
            margin-top: 10px;
        }
    </style>
}


@section Control {
    @{
        var customerColumns = new List<GridColumn>
    {
        new GridColumn("customerid", "CustomerID") {PrimaryKey = true },
        new GridColumn("firstname", "Forename"),
        new GridColumn("lastname", "Surname"),
        new GridColumn("email", "Email Address") {Format = FormatType.Email },
        new GridColumn("address", "Address"),
        new GridColumn("city", "City") { InitialSortOrder = SortOrder.Desc},
        new GridColumn("postalcode", "Post Code"),
    };

        var invoiceColumns = new List<GridColumn>
    {
        new GridColumn("invoiceid", "Invoice ID") {PrimaryKey = true },
        new GridColumn("customerid", "Customer ID") {ForeignKey = true, DataOnly = true },
        new GridColumn("invoicedate", "Date") { DataType = typeof(DateTime) },
        new GridColumn("billingaddress", "Address"),
        new GridColumn("billingcity", "City"),
        new GridColumn("billingstate", "State"),
        new GridColumn("billingcountry", "Country"),
        new GridColumn("billingpostalcode", "Post Code"),
    };

        var invoiceItemColumns = new List<GridColumn>
    {
        new GridColumn("invoicelineid", "Invoice Line ID"),
        new GridColumn("invoiceid", "Invoice ID") {ForeignKey = true, DataOnly = true },
        new GridColumn("trackid", "Track ID") {Lookup = new Lookup("tracks","trackid","name")},
        new GridColumn("unitprice", "Price") { Format = "c"},
        new GridColumn("quantity", "Qty"),
    };

        var invoiceLineGridModel = new GridModel("Invoice_items");
        invoiceLineGridModel.Columns = invoiceItemColumns;
        invoiceLineGridModel.Caption = "Invoice Lines";
        invoiceLineGridModel.PageSize = 10;
        invoiceLineGridModel.ToolbarPosition = ToolbarPosition.Hidden;

        var invoiceGridModel = new GridModel("Invoices");
        invoiceGridModel.Columns = invoiceColumns;
        invoiceGridModel.AddLinkedGrid(invoiceLineGridModel);
        invoiceGridModel.Caption = "Invoices";
        invoiceGridModel.PageSize = 10;
        invoiceGridModel.ToolbarPosition = ToolbarPosition.Hidden;
        invoiceGridModel.ClientEvents[ClientEvent.RowSelected] = "setOrderDetailsTabLabel";

        var customerGridModel = new GridModel(DataSourceType.SQLite, "Chinook", "Customers");
        customerGridModel.Columns = customerColumns;
        customerGridModel.AddLinkedGrid(invoiceGridModel);
        customerGridModel.PageSize = 10;
        customerGridModel.ClientEvents[ClientEvent.RowSelected] = "setOrderTabLabel";

        <div class="source">
            <ul class="nav nav-tabs" id="myTab" role="tablist">
                @Tab("Customers", true)
                @Tab("Orders", false)
                @Tab("Order Details", false)
            </ul>
            <div class="tab-content" id="linkedGrids">
                <div class="tab-pane fade show active" id="customers" role="tabpanel" aria-labelledby="customers-tab">
                    @(await new DbNetSuiteCore.GridControl(HttpContext).Render(customerGridModel))
                </div>
                <div class="tab-pane fade" id="orders" role="tabpanel" aria-labelledby="orders-tab">
                    @(await new DbNetSuiteCore.GridControl(HttpContext).Render(invoiceGridModel))
                </div>
                <div class="tab-pane fade" id="orderdetails" role="tabpanel" aria-labelledby="orderdetails-tab">
                    @(await new DbNetSuiteCore.GridControl(HttpContext).Render(invoiceLineGridModel))
                </div>
            </div>
        </div>
    }
}

@section Scripts
                {
    <script type="text/javascript" class="source">
        function setOrderTabLabel(grid, args) {
            $("button#orders-tab").html("Customer <b>" + grid.columnValue("customerid", args.selectedRow) + "</b> orders")
        }

        function setOrderDetailsTabLabel(grid, args) {
            $("button#orderdetails-tab").html("Invoice <b>" + grid.columnValue("invoiceid", args.selectedRow) + "</b> details")
        }
    </script>
}

@functions
{
    public static HtmlString Tab(string label, bool active)
    {
        string name = label.ToLower().Replace(" ", string.Empty);
        return new HtmlString($"<li class=\"nav-item\" role=\"presentation\"><button class=\"nav-link {(active ? "active" : string.Empty)}\" id=\"{name}-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#{name}\" type=\"button\" role=\"tab\" aria-controls=\"{name}\" aria-selected=\"{active.ToString().ToLower()}\">{label}</button></li>");
    }
}