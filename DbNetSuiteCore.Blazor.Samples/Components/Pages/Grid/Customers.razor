@page "/Grid/Customers"
@attribute [StreamRendering]
@layout SampleLayout
@using DbNetSuiteCore.Blazor.Samples.Components.Layout
@using DbNetSuiteCore.Models
@using DbNetSuiteCore.Constants
@using DbNetSuiteCore.Enums
@using Microsoft.AspNetCore.Components.Sections
@inject IHttpContextAccessor httpContextAccessor
@inject IWebHostEnvironment env
@inject IJSRuntime JSRuntime

<PageTitle>Customers</PageTitle>

@{
    var customerGridModel = new GridModel(DataSourceType.SQLite, "Chinook", "Customers");
    customerGridModel.Columns = new List<GridColumn>
    {
        new GridColumn("customerid", "CustomerID") {PrimaryKey = true },
        new GridColumn("firstname", "Forename"),
        new GridColumn("lastname", "Surname"),
        new GridColumn("email", "Email Address") {Format = FormatType.Email },
        new GridColumn("address", "Address"),
        new GridColumn("city", "City") { InitialSortOrder = SortOrder.Desc},
        new GridColumn("postalcode", "Post Code"),
    }; 

    customerGridModel.PageSize = 10;
}
@if (httpContextAccessor.HttpContext != null)
{
    @(new DbNetSuiteCore.Blazor.Control(httpContextAccessor.HttpContext).Render(customerGridModel).Result)
}

<SectionContent SectionName="razor-source">
    @HelperFunctions.GetSourceCode(httpContextAccessor.HttpContext, env)
</SectionContent>

<SectionContent SectionName="summary">
    <p data-summary>At it's simplest just define the @HelperFunctions.Wiki("GridModel", "Grid-Model") specifying the data source type, connection alias and table or view name. The @HelperFunctions.Wiki("GridColumn", "Grid-Column") objects define each column in the grid.</p>
</SectionContent>