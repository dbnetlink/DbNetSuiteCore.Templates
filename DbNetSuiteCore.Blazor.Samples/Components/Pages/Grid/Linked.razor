@page "/Grid/Linked"
@layout SampleLayout
@using DbNetSuiteCore.Blazor.Samples.Components.Layout
@using DbNetSuiteCore.Blazor.Samples.Components.Pages
@using DbNetSuiteCore.Models
@using DbNetSuiteCore.Constants
@using DbNetSuiteCore.Enums
@using Microsoft.AspNetCore.Components.Sections
@inject IHttpContextAccessor httpContextAccessor

<PageTitle>Customers</PageTitle>

@{
    var customerColumns = new List<GridColumn>
    {
        new GridColumn("customerid", "CustomerID") {PrimaryKey = true },
        new GridColumn("firstname", "Forename"),
        new GridColumn("lastname", "Surname"),
        new GridColumn("email", "Email Address") {Format = FormatType.Email },
        new GridColumn("address", "Address"),
        new GridColumn("city", "City") { InitialSortOrder = SortOrder.Desc},
        new GridColumn("postalcode", "Post Code"),
    };

    var invoiceColumns = new List<GridColumn>
    {
        new GridColumn("invoiceid", "Invoice ID") {PrimaryKey = true },
        new GridColumn("customerid", "Customer ID") {ForeignKey = true },
        new GridColumn("invoicedate", "Date"),
        new GridColumn("billingaddress", "Address"),
        new GridColumn("billingcity", "City"),
        new GridColumn("billingstate", "State"),
        new GridColumn("billingcountry", "Country"),
        new GridColumn("billingpostalcode", "Post Code"),
    };

    var invoiceItemColumns = new List<GridColumn>
    {
        new GridColumn("invoicelineid", "Invoice Line ID"),
        new GridColumn("invoiceid", "Invoice ID") {ForeignKey = true },
        new GridColumn("trackid", "Track ID") {Lookup = new Lookup("tracks","trackid","name")},
        new GridColumn("unitprice", "Price"),
        new GridColumn("quantity", "Qty"),
    };

    var invoiceLineGridModel = new GridModel("Invoice_items");
    invoiceLineGridModel.Columns = invoiceItemColumns;
    invoiceLineGridModel.Caption = "Invoice Lines";
    invoiceLineGridModel.PageSize = 5;
    //  invoiceLineGridModel.ToolbarPosition = ToolbarPosition.Hidden;

    var invoiceGridModel = new GridModel("Invoices");
    invoiceGridModel.Columns = invoiceColumns;
    invoiceGridModel.LinkedControl = invoiceLineGridModel;
    invoiceGridModel.Caption = "Invoices";
    invoiceGridModel.PageSize = 5;
    // invoiceGridModel.ToolbarPosition = ToolbarPosition.Hidden;

    var customerGridModel = new GridModel(DataSourceType.SQLite, "Chinook", "Customers");
    customerGridModel.Columns = customerColumns;
    customerGridModel.LinkedControl = invoiceGridModel;
    customerGridModel.PageSize = 5;
}

<div class="d-flex flex-column gap-3">
    <div>
        @(new DbNetSuiteCore.Blazor.Control(httpContextAccessor).Render(customerGridModel))
    </div>
    <div>
        @(new DbNetSuiteCore.Blazor.Control(httpContextAccessor).Render(invoiceGridModel))
    </div>
    <div>
        @(new DbNetSuiteCore.Blazor.Control(httpContextAccessor).Render(invoiceLineGridModel))
    </div>
</div>

<SectionContent SectionName="summary">
    <p data-summary>Grid controls can be linked together by assigning a child control to a parent control using the @HelperFunctions.Wiki("gridmodel-properties#linkedcontrol-componentcontrol", "LinkedControl"). The child control will return records whose @HelperFunctions.Wiki("gridcolumn-properties#ForeignKey-bool", "ForeignKey") column matches the @HelperFunctions.Wiki("gridcolumn-properties#PrimaryKey-bool", "PrimaryKey") column of the parent.</p>
</SectionContent>

