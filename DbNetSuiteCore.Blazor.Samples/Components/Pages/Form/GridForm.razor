@page "/Form/GridForm"
@layout SampleLayout
@using DbNetSuiteCore.Blazor.Samples.Components.Layout
@using DbNetSuiteCore.Blazor.Samples.Components.Pages
@using DbNetSuiteCore.Models
@using DbNetSuiteCore.Constants
@using DbNetSuiteCore.Enums
@using Microsoft.AspNetCore.Components.Sections
@inject IHttpContextAccessor httpContextAccessor
@{
var productsGrid = new GridModel(DataSourceType.SQLite, "Northwind", "Products") { ViewDialog = new ViewDialog() { LayoutColumns = 2 }, PageSize = 5, Caption = "Products" };
productsGrid.Columns = new List<GridColumn>() 
{
    new GridColumn("ProductID") { PrimaryKey = true },
    new GridColumn("ProductName"),
    new GridColumn("SupplierID","Supplier") { Lookup = new Lookup("Suppliers", "SupplierId", "CompanyName"), Filter = FilterType.Default },
    new GridColumn("CategoryID","Category") { Lookup = new Lookup("Categories", "CategoryID", "CategoryName"), Filter = FilterType.Default },
    new GridColumn("QuantityPerUnit", "Qty."),
    new GridColumn("UnitPrice","Price") { Format = "c"},
    new GridColumn("UnitsInStock", "Stock"),
    new GridColumn("UnitsOnOrder","On Order"),
    new GridColumn("ReorderLevel"),
    new GridColumn("Discontinued") { DataType = typeof(Boolean), Filter = FilterType.Default}
};
var productForm = new FormModel("Products") { Insert = true, Delete = true };
productForm.Columns = new List<FormColumn>() 
{
    new FormColumn("ProductID","ID") { ForeignKey = true },
    new FormColumn("ProductName", "Name"),
    new FormColumn("SupplierID","Supplier") { Lookup = new Lookup("Suppliers", "SupplierId", "CompanyName"),Required = true },
    new FormColumn("CategoryID","Category") { Lookup = new Lookup("Categories", "CategoryID", "CategoryName"),Required = true},
    new FormColumn("QuantityPerUnit", "Qty"){ InitialValue = 0},
    new FormColumn("UnitPrice", "Price") {Required = true,InitialValue = 0, MinValue = 0, MaxValue = 100 },
    new FormColumn("UnitsInStock", "Stock") {Required = true,InitialValue = 0, MinValue = 0 },
    new FormColumn("UnitsOnOrder", "On Order") {Required = true,InitialValue = 0 },
    new FormColumn("ReorderLevel", "Re-order Level") {Required = true,InitialValue = 0, MaxValue = 50 },
    new FormColumn("Discontinued") {DataType = typeof(bool), InitialValue = false}
};

productsGrid.LinkedControl = productForm;
<div style="display:flex; flex-direction: column; gap:10px;">
    <div>
        @(new DbNetSuiteCore.Blazor.Control(httpContextAccessor).Render(productsGrid))
    </div>
    <div>
        @(new DbNetSuiteCore.Blazor.Control(httpContextAccessor).Render(productForm))
    </div>
</div>
}

<SectionContent SectionName="summary">
    <p data-summary>For a Form with multiple records you can increase the visibility of the dataset by linking the Form control to a parent Grid control using the @HelperFunctions.Wiki("gridmodel#linkedcontrol-componentmodel", "LinkedControl") property. This also adds the enhanced navigation, sorting and filtering capabilities which can be particularly helpful with larger number of records. The sample also demonstrates use of the @HelperFunctions.Wiki("formcolumn-properties#required-boolean", "Required"), @HelperFunctions.Wiki("formcolumn-properties#initialvalue-object", "InitialValue"), @HelperFunctions.Wiki("formcolumn-properties#minvalue-object", "MinValue") and @HelperFunctions.Wiki("formcolumn-properties#maxvalue-object", "MaxValue") column properties</p>
</SectionContent>