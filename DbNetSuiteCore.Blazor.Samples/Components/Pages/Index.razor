@page "/"
@attribute [StreamRendering]
@using DbNetSuiteCore.Models
@using DbNetSuiteCore.Enums
@inject IJSRuntime JSRuntime

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "key")]
    public string? Key { get; set; }

    public string Title()
    {
        string title = "Grid Samples";

        switch(Key?.ToLower())
        {
            case "select":
                title = "Select Samples";
                break;
            case "form":
                title = "Form Samples";
                break;
        }

        return title;
    }
}

@inject IHttpContextAccessor httpContextAccessor



<PageTitle>Samples</PageTitle>
@{
    <h1>@Title()</h1>
    GridModel samplesGrid = new GridModel(DataSourceType.FileSystem, $"../Components/Pages/{(string.IsNullOrEmpty(Key) ? "grid" : Key)}") { FixedFilter = "(IsDirectory = 1 or Name like '%.razor') and Name not in ('Error.razor','Index.razor')" };
    samplesGrid.Columns = new List<GridColumn>()
    {
        new GridColumn(FileSystemColumn.Name.ToString()),
        new GridColumn(FileSystemColumn.Content.ToString(), "Summary") { RegularExpression = "<p data-summary>(.*?)</p>"}
    };
    samplesGrid.ToolbarPosition = ToolbarPosition.Hidden;
    samplesGrid.ClientEvents[GridClientEvent.CellTransform] = "createLink";
}
@(new DbNetSuiteCore.Blazor.Control(httpContextAccessor.HttpContext).Render(samplesGrid).Result)

<script>
    function createLink(gridControl, args) {
        var tbody = args.cell.closest("tbody")
        var url = tbody.dataset.url.toString().toLowerCase().replace('../components/pages', '')

        switch (args.columnName.toLowerCase())
        {
            case "name":
                var name = args.cell.dataset.value.toString()
                if (name.endsWith(".razor") && name.startsWith("_") == false) {
                    args.cell.innerHTML = `<a target='_blank' href='${window.location.origin}${url}/${name.replace(".razor", "")}'>${name.replace(".razor", "")}</a>`
                }
                break;

            case "content":
                var content = args.cell.dataset.value.toString();
                args.cell.innerHTML = content.replace(/@@HelperFunctions\.Wiki\(\s*"([^"]+)"(?:\s*,.*)?\)/g,'$1');
                break;
        }
    }
</script>